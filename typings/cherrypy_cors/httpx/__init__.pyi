"""
This type stub file was generated by pyright.
"""

import ipaddress
import re
import typing
import idna
from ._exceptions import InvalidURL

"""
An implementation of `urlparse` that provides URL validation and normalization
as described by RFC3986.

We rely on this implementation rather than the one in Python's stdlib, because:

* It provides more complete URL validation.
* It properly differentiates between an empty querystring and an absent querystring,
  to distinguish URLs with a trailing '?'.
* It handles scheme, hostname, port, and path normalization.
* It supports IDNA hostnames, normalizing them to their encoded form.
* The API supports passing individual components, as well as the complete URL string.

Previously we relied on the excellent `rfc3986` package to handle URL parsing and
validation, but this module provides a simpler alternative, with less indirection
required.
"""
MAX_URL_LENGTH = ...
UNRESERVED_CHARACTERS = ...
SUB_DELIMS = ...
PERCENT_ENCODED_REGEX = ...
URL_REGEX = ...
AUTHORITY_REGEX = ...
COMPONENT_REGEX = ...
IPv4_STYLE_HOSTNAME = ...
IPv6_STYLE_HOSTNAME = ...
class ParseResult(typing.NamedTuple):
    scheme: str
    userinfo: str
    host: str
    port: typing.Optional[int]
    path: str
    query: typing.Optional[str]
    fragment: typing.Optional[str]
    @property
    def authority(self) -> str:
        ...
    
    @property
    def netloc(self) -> str:
        ...
    
    def copy_with(self, **kwargs: typing.Optional[str]) -> ParseResult:
        ...
    
    def __str__(self) -> str:
        ...
    


def urlparse(url: str = ..., **kwargs: typing.Optional[str]) -> ParseResult:
    ...

def encode_host(host: str) -> str:
    ...

def normalize_port(port: typing.Optional[typing.Union[str, int]], scheme: str) -> typing.Optional[int]:
    ...

def validate_path(path: str, has_scheme: bool, has_authority: bool) -> None:
    """
    Path validation rules that depend on if the URL contains a scheme or authority component.

    See https://datatracker.ietf.org/doc/html/rfc3986.html#section-3.3
    """
    ...

def normalize_path(path: str) -> str:
    """
    Drop "." and ".." segments from a URL path.

    For example:

        normalize_path("/path/./to/somewhere/..") == "/path/to"
    """
    ...

def percent_encode(char: str) -> str:
    """
    Replace every character in a string with the percent-encoded representation.

    Characters outside the ASCII range are represented with their a percent-encoded
    representation of their UTF-8 byte sequence.

    For example:

        percent_encode(" ") == "%20"
    """
    ...

def quote(string: str, safe: str = ...) -> str:
    ...

def urlencode(items: typing.List[typing.Tuple[str, str]]) -> str:
    ...

