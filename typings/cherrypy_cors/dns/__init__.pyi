"""
This type stub file was generated by pyright.
"""

import socket
import asyncio
import sys
import dns._asyncbackend
import dns.exception

"""asyncio library query support"""
_is_win32 = ...
class _DatagramProtocol:
    def __init__(self) -> None:
        ...
    
    def connection_made(self, transport): # -> None:
        ...
    
    def datagram_received(self, data, addr): # -> None:
        ...
    
    def error_received(self, exc): # -> None:
        ...
    
    def connection_lost(self, exc): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


class DatagramSocket(dns._asyncbackend.DatagramSocket):
    def __init__(self, family, transport, protocol) -> None:
        ...
    
    async def sendto(self, what, destination, timeout): # -> int:
        ...
    
    async def recvfrom(self, size, timeout): # -> Any:
        ...
    
    async def close(self): # -> None:
        ...
    
    async def getpeername(self):
        ...
    
    async def getsockname(self):
        ...
    


class StreamSocket(dns._asyncbackend.StreamSocket):
    def __init__(self, af, reader, writer) -> None:
        ...
    
    async def sendall(self, what, timeout):
        ...
    
    async def recv(self, size, timeout):
        ...
    
    async def close(self): # -> None:
        ...
    
    async def getpeername(self):
        ...
    
    async def getsockname(self):
        ...
    


class Backend(dns._asyncbackend.Backend):
    def name(self): # -> Literal['asyncio']:
        ...
    
    async def make_socket(self, af, socktype, proto=..., source=..., destination=..., timeout=..., ssl_context=..., server_hostname=...): # -> DatagramSocket | StreamSocket:
        ...
    
    async def sleep(self, interval): # -> None:
        ...
    
    def datagram_connection_required(self): # -> bool:
        ...
    


