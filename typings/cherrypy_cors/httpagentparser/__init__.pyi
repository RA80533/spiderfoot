"""
This type stub file was generated by pyright.
"""

"""
Extract client information from http user agent
The module does not try to detect all capabilities of browser in current form (it can easily be extended though).
Tries to
    * be fast
    * very easy to extend
    * reliable enough for practical purposes
    * assist python web apps to detect clients.
"""
__version__ = ...
class DetectorsHub(dict):
    _known_types = ...
    def __init__(self, *args, **kw) -> None:
        ...
    
    def register(self, detector): # -> None:
        ...
    
    def __iter__(self): # -> Iterator[str]:
        ...
    
    def registerDetectors(self): # -> None:
        ...
    


class DetectorBase:
    name = ...
    info_type = ...
    result_key = ...
    order = ...
    look_for = ...
    skip_if_found = ...
    can_register = ...
    version_markers = ...
    allow_space_in_version = ...
    _suggested_detectors = ...
    platform = ...
    bot = ...
    def __init__(self) -> None:
        ...
    
    def detect(self, agent, result): # -> Literal[True] | None:
        ...
    
    def checkWords(self, agent): # -> str | Literal[False] | None:
        ...
    
    def getVersion(self, agent, word): # -> None:
        """
        => version string /None
        """
        ...
    


class OS(DetectorBase):
    info_type = ...
    can_register = ...
    version_markers = ...
    allow_space_in_version = ...
    platform = ...


class Dist(DetectorBase):
    info_type = ...
    can_register = ...
    platform = ...


class Flavor(DetectorBase):
    info_type = ...
    can_register = ...
    platform = ...


class Browser(DetectorBase):
    info_type = ...
    can_register = ...


class Konqueror(Browser):
    look_for = ...
    version_markers = ...


class OperaMobile(Browser):
    look_for = ...
    name = ...
    def getVersion(self, agent, word):
        ...
    


class Opera(Browser):
    look_for = ...
    skip_if_found = ...
    def getVersion(self, agent, word):
        ...
    


class OperaNew(Browser):
    """
    Opera after version 15
    """
    name = ...
    look_for = ...
    skip_if_found = ...
    version_markers = ...


class Netscape(Browser):
    look_for = ...
    version_markers = ...


class Trident(Browser):
    look_for = ...
    skip_if_found = ...
    name = ...
    version_markers = ...
    trident_to_ie_versions = ...
    def getVersion(self, agent, word): # -> str | None:
        ...
    


class MSIE(Browser):
    look_for = ...
    skip_if_found = ...
    name = ...
    version_markers = ...


class MSEdge(Browser):
    look_for = ...
    skip_if_found = ...
    version_markers = ...


class ChromiumEdge(Browser):
    look_for = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class Galeon(Browser):
    look_for = ...


class WOSBrowser(Browser):
    look_for = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class Safari(Browser):
    look_for = ...
    skip_if_found = ...
    def checkWords(self, agent): # -> str | Literal[False] | None:
        ...
    
    def getVersion(self, agent, word):
        ...
    


class GoogleBot(Browser):
    look_for = ...
    bot = ...
    version_markers = ...


class GoogleFeedFetcher(Browser):
    look_for = ...
    bot = ...
    def get_version(self, agent): # -> None:
        ...
    


class RunscopeRadar(Browser):
    look_for = ...
    bot = ...


class GoogleAppEngine(Browser):
    look_for = ...
    bot = ...
    def get_version(self, agent): # -> None:
        ...
    


class GoogleApps(Browser):
    look_for = ...
    bot = ...
    def get_version(self, agent): # -> None:
        ...
    


class TwitterBot(Browser):
    look_for = ...
    bot = ...


class TelegramBot(Browser):
    look_for = ...
    bot = ...


class MJ12Bot(Browser):
    look_for = ...
    bot = ...


class YandexBot(Browser):
    look_for = ...
    bot = ...
    def getVersion(self, agent, word):
        ...
    


class BingBot(Browser):
    look_for = ...
    version_markers = ...
    bot = ...


class BaiduBot(Browser):
    look_for = ...
    bot = ...
    version_markers = ...


class LinkedInBot(Browser):
    look_for = ...
    bot = ...


class ArchiveDotOrgBot(Browser):
    look_for = ...
    bot = ...


class YoudaoBot(Browser):
    look_for = ...
    bot = ...


class YoudaoBotImage(Browser):
    look_for = ...
    bot = ...


class RogerBot(Browser):
    look_for = ...
    bot = ...


class TweetmemeBot(Browser):
    look_for = ...
    bot = ...


class WebshotBot(Browser):
    look_for = ...
    bot = ...


class SensikaBot(Browser):
    look_for = ...
    bot = ...


class YesupBot(Browser):
    look_for = ...
    bot = ...


class DotBot(Browser):
    look_for = ...
    bot = ...


class PhantomJS(Browser):
    look_for = ...
    bot = ...


class FacebookExternalHit(Browser):
    look_for = ...
    bot = ...


class NokiaOvi(Browser):
    look_for = ...


class UCBrowser(Browser):
    look_for = ...


class BrowserNG(Browser):
    look_for = ...


class Dolfin(Browser):
    look_for = ...


class NetFront(Browser):
    look_for = ...


class Jasmine(Browser):
    look_for = ...


class Openwave(Browser):
    look_for = ...


class UPBrowser(Browser):
    look_for = ...


class OneBrowser(Browser):
    look_for = ...


class ObigoInternetBrowser(Browser):
    look_for = ...


class TelecaBrowser(Browser):
    look_for = ...


class MAUI(Browser):
    look_for = ...
    def getVersion(self, agent, word):
        ...
    


class NintendoBrowser(Browser):
    look_for = ...


class AndroidBrowser(Browser):
    look_for = ...
    skip_if_found = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class Firefox(Browser):
    look_for = ...
    version_markers = ...
    skip_if_found = ...


class SeaMonkey(Browser):
    look_for = ...
    version_markers = ...


class Linux(OS):
    look_for = ...
    platform = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class Blackberry(OS):
    look_for = ...
    platform = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class BlackberryPlaybook(Dist):
    look_for = ...
    platform = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class WindowsPhone(OS):
    name = ...
    platform = ...
    look_for = ...
    version_markers = ...


class iOS(OS):
    look_for = ...
    skip_if_found = ...


class iPhone(Dist):
    look_for = ...
    platform = ...
    skip_if_found = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class IPad(Dist):
    look_for = ...
    platform = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class Macintosh(OS):
    look_for = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class MacOS(Flavor):
    look_for = ...
    platform = ...
    skip_if_found = ...
    def getVersion(self, agent, word): # -> Literal['']:
        ...
    


class Windows(Dist):
    look_for = ...
    platform = ...


class Windows(OS):
    look_for = ...
    platform = ...
    skip_if_found = ...
    win_versions = ...
    def getVersion(self, agent, word): # -> str:
        ...
    


class Ubuntu(Dist):
    look_for = ...
    version_markers = ...


class Debian(Dist):
    look_for = ...
    version_markers = ...


class Chrome(Browser):
    look_for = ...
    version_markers = ...
    skip_if_found = ...
    def getVersion(self, agent, word):
        ...
    


class YaBrowser(Browser):
    look_for = ...
    name = ...
    version_markers = ...
    def getVersion(self, agent, word):
        ...
    


class ChromeiOS(Browser):
    look_for = ...
    version_markers = ...


class ChromeOS(OS):
    look_for = ...
    platform = ...
    version_markers = ...
    def getVersion(self, agent, word):
        ...
    


class Android(Dist):
    look_for = ...
    platform = ...
    skip_if_found = ...
    def getVersion(self, agent, word):
        ...
    


class WebOS(Dist):
    look_for = ...
    def getVersion(self, agent, word):
        ...
    


class NokiaS40(OS):
    look_for = ...
    platform = ...
    def getVersion(self, agent, word): # -> None:
        ...
    


class Symbian(OS):
    look_for = ...
    platform = ...


class PlayStation(OS):
    look_for = ...
    platform = ...
    version_markers = ...


class prefs:
    os = ...
    dist = ...
    flavor = ...


detectorshub = ...
def detect(agent, fill_none=...): # -> dict[str, dict[str, None]]:
    """
    fill_none: if name/version is not detected respective key is still added to the result with value None
    """
    ...

UNKNOWN_OS_NAME = ...
UNKNOWN_BROWSER_NAME = ...
def simple_detect_tuple(agent, parsed_agent=...): # -> tuple[LiteralString | list[Unknown] | Literal['Unknown OS'], Unknown | dict[str, None] | list[Unknown] | Literal[''], Unknown | Literal['Unknown Browser'], Unknown | Literal['']]:
    """
    @params:
        agent::str
        parsed_agent::dict
            The result of detect, used to save calculations

    @return:
        (os_name, os_version, browser_name, browser_version)::Tuple(str)
    """
    ...

def simple_detect(agent, parsed_agent=...): # -> tuple[Unknown | LiteralString | list[Unknown] | Literal['Unknown OS'], LiteralString | Unknown | Literal['Unknown Browser']]:
    """
    @params:
        agent::str
        parsed_agent::dict
            The result of detect, used to save calculations

    @return:
        (os_name_version, browser_name_version)::Tuple(str)
    """
    ...

