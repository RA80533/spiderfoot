"""
This type stub file was generated by pyright.
"""

import re
import six
import cherrypy
import httpagentparser
from cherrypy.lib import set_vary_header

CORS_ALLOW_METHODS = ...
CORS_ALLOW_ORIGIN = ...
CORS_ALLOW_CREDENTIALS = ...
CORS_EXPOSE_HEADERS = ...
CORS_REQUEST_METHOD = ...
CORS_REQUEST_HEADERS = ...
CORS_MAX_AGE = ...
CORS_ALLOW_HEADERS = ...
PUBLIC_ORIGIN = ...
def expose(allow_credentials=..., expose_headers=..., origins=...): # -> bool:
    """Adds CORS support to the resource.

    If the resource is allowed to be exposed, the value of the
    `Access-Control-Allow-Origin`_ header in the response will echo
    the `Origin`_ request header, and `Origin` will be
    appended to the `Vary`_ response header.

    :param allow_credentials: Use credentials to make cookies work
                              (see `Access-Control-Allow-Credentials`_).
    :type allow_credentials: bool
    :param expose_headers: List of headers clients will be able to access
                           (see `Access-Control-Expose-Headers`_).
    :type expose_headers: list or NoneType
    :param origins: List of allowed origins clients must reference.
    :type origins: list or NoneType

    :returns: Whether the resource is being exposed.
    :rtype: bool

    - Configuration example:

        .. code-block:: python

            config = {
                '/static': {
                    'tools.staticdir.on': True,
                    'cors.expose.on': True,
                }
            }
    - Decorator example:

        .. code-block:: python

            @cherrypy_cors.tools.expose()
            def DELETE(self):
                self._delete()

    """
    ...

def expose_public(expose_headers=...): # -> None:
    """Adds CORS support to the resource from any origin.

    If the resource is allowed to be exposed, the value of the
    `Access-Control-Allow-Origin`_ header in the response will be `*`.

    :param expose_headers: List of headers clients will be able to access
                           (see `Access-Control-Expose-Headers`_).
    :type expose_headers: list or NoneType

    :rtype: NoneType
    """
    ...

def preflight(allowed_methods, allowed_headers=..., allow_credentials=..., max_age=..., origins=...): # -> bool:
    """Adds CORS `preflight`_ support to a `HTTP OPTIONS` request.

    :param allowed_methods: List of supported `HTTP` methods
                            (see `Access-Control-Allow-Methods`_).
    :type allowed_methods: list or NoneType
    :param allowed_headers: List of supported `HTTP` headers
                            (see `Access-Control-Allow-Headers`_).
    :type allowed_headers: list or NoneType
    :param allow_credentials: Use credentials to make cookies work
                              (see `Access-Control-Allow-Credentials`_).
    :type allow_credentials: bool
    :param max_age: Seconds to cache the preflight request
                    (see `Access-Control-Max-Age`_).
    :type max_age: int
    :param origins: List of allowed origins clients must reference.
    :type origins: list or NoneType

    :returns: Whether the preflight is allowed.
    :rtype: bool

    - Used as a decorator with the `Method Dispatcher`_

        .. code-block:: python

                @cherrypy_cors.tools.preflight(
                    allowed_methods=["GET", "DELETE", "PUT"])
                def OPTIONS(self):
                    pass

    - Function call with the `Object Dispatcher`_

        .. code-block:: python

                @cherrypy.expose
                @cherrypy.tools.allow(
                    methods=["GET", "DELETE", "PUT", "OPTIONS"])
                def thing(self):
                    if cherrypy.request.method == "OPTIONS":
                        cherrypy_cors.preflight(
                            allowed_methods=["GET", "DELETE", "PUT"])
                    else:
                        self._do_other_things()

    """
    ...

def install() -> None:
    """Install the toolbox such that it's available in all applications."""
    ...

class CORS:
    """A generic CORS handler."""
    def __init__(self, req_headers, resp_headers) -> None:
        ...
    
    def expose(self, allow_credentials, expose_headers, origins): # -> bool:
        ...
    
    def expose_public(self, expose_headers): # -> None:
        ...
    
    def preflight(self, allowed_methods, allowed_headers, allow_credentials, max_age, origins): # -> bool:
        ...
    
    @property
    def origin(self):
        ...
    
    @property
    def requested_method(self):
        ...
    
    @property
    def requested_headers(self):
        ...
    


tools = ...
