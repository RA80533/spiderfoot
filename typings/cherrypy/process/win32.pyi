"""
This type stub file was generated by pyright.
"""

import win32serviceutil
from cherrypy.process import plugins, wspbus

"""Windows service. Requires pywin32."""
class ConsoleCtrlHandler(plugins.SimplePlugin):
    """A WSPBus plugin for handling Win32 console events (like Ctrl-C)."""
    def __init__(self, bus) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def handle(self, event): # -> Literal[1, 0]:
        """Handle console control events (like Ctrl-C)."""
        ...
    


class Win32Bus(wspbus.Bus):
    """A Web Site Process Bus implementation for Win32.

    Instead of time.sleep, this bus blocks using native win32event objects.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def state(self):
        ...
    
    @state.setter
    def state(self, value): # -> None:
        ...
    
    def wait(self, state, interval=..., channel=...): # -> None:
        """Wait for the given state(s), KeyboardInterrupt or SystemExit.

        Since this class uses native win32event objects, the interval
        argument is ignored.
        """
        ...
    


class _ControlCodes(dict):
    """Control codes used to "signal" a service via ControlService.

    User-defined control codes are in the range 128-255. We generally use
    the standard Python value for the Linux signal and add 128. Example:

        >>> signal.SIGUSR1
        10
        control_codes['graceful'] = 128 + 10
    """
    def key_for(self, obj):
        """For the given value, return its corresponding key."""
        ...
    


control_codes = ...
def signal_child(service, command): # -> None:
    ...

class PyWebService(win32serviceutil.ServiceFramework):
    """Python Web Service."""
    _svc_name_ = ...
    _svc_display_name_ = ...
    _svc_deps_ = ...
    _exe_name_ = ...
    _exe_args_ = ...
    _svc_description_ = ...
    def SvcDoRun(self): # -> None:
        ...
    
    def SvcStop(self): # -> None:
        ...
    
    def SvcOther(self, control): # -> None:
        ...
    


if __name__ == '__main__':
    ...
