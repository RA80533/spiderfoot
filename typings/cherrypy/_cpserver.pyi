"""
This type stub file was generated by pyright.
"""

from cherrypy.process.servers import ServerAdapter

"""Manage HTTP servers with CherryPy."""
__all__ = ('Server', )
class Server(ServerAdapter):
    """An adapter for an HTTP server.

    You can set attributes (like socket_host and socket_port)
    on *this* object (which is probably cherrypy.server), and call
    quickstart. For example::

        cherrypy.server.socket_port = 80
        cherrypy.quickstart()
    """
    socket_port = ...
    _socket_host = ...
    @property
    def socket_host(self): # -> str:
        """The hostname or IP address on which to listen for connections.

        Host values may be any IPv4 or IPv6 address, or any valid hostname.
        The string 'localhost' is a synonym for '127.0.0.1' (or '::1', if
        your hosts file prefers IPv6). The string '0.0.0.0' is a special
        IPv4 entry meaning "any active interface" (INADDR_ANY), and '::'
        is the similar IN6ADDR_ANY for IPv6. The empty string or None are
        not allowed.
        """
        ...
    
    @socket_host.setter
    def socket_host(self, value): # -> None:
        ...
    
    socket_file = ...
    socket_queue_size = ...
    socket_timeout = ...
    accepted_queue_size = ...
    accepted_queue_timeout = ...
    shutdown_timeout = ...
    protocol_version = ...
    thread_pool = ...
    thread_pool_max = ...
    max_request_header_size = ...
    max_request_body_size = ...
    instance = ...
    ssl_context = ...
    ssl_certificate = ...
    ssl_certificate_chain = ...
    ssl_private_key = ...
    ssl_ciphers = ...
    ssl_module = ...
    statistics = ...
    nodelay = ...
    wsgi_version = ...
    peercreds = ...
    peercreds_resolve = ...
    def __init__(self) -> None:
        """Initialize Server instance."""
        ...
    
    def httpserver_from_self(self, httpserver=...): # -> tuple[Any | CPWSGIServer | Unknown, str | bytes | tuple[str | Unknown, int | Unknown | None] | None]:
        """Return a (httpserver, bind_addr) pair based on self attributes."""
        ...
    
    def start(self): # -> None:
        """Start the HTTP server."""
        ...
    
    @property
    def bind_addr(self): # -> str | bytes | tuple[str | Unknown, int | Unknown | None] | None:
        """Return bind address.

        A (host, port) tuple for TCP sockets or a str for Unix domain sockts.
        """
        ...
    
    @bind_addr.setter
    def bind_addr(self, value): # -> None:
        ...
    
    def base(self): # -> str | bytes:
        """Return the base for this server.

        e.i. scheme://host[:port] or sock file
        """
        ...
    


