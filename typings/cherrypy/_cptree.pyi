"""
This type stub file was generated by pyright.
"""

from cherrypy import _cprequest

"""CherryPy Application and Tree objects."""
class Application:
    """A CherryPy Application.

    Servers and gateways should not instantiate Request objects directly.
    Instead, they should ask an Application object for a request object.

    An instance of this class may also be used as a WSGI callable
    (WSGI application object) for itself.
    """
    root = ...
    config = ...
    namespaces = ...
    toolboxes = ...
    log = ...
    wsgiapp = ...
    request_class = _cprequest.Request
    response_class = _cprequest.Response
    relative_urls = ...
    def __init__(self, root, script_name=..., config=...) -> None:
        """Initialize Application with given root."""
        ...
    
    def __repr__(self): # -> str:
        """Generate a representation of the Application instance."""
        ...
    
    script_name_doc = ...
    @property
    def script_name(self):
        """The URI "mount point" for this app.

        A mount point is that portion of the URI which is constant for all URIs
        that are serviced by this application; it does not include scheme,
        host, or proxy ("virtual host") portions of the URI.

        For example, if script_name is "/my/cool/app", then the URL
        "http://www.example.com/my/cool/app/page1" might be handled by a
        "page1" method on the root object.

        The value of script_name MUST NOT end in a slash. If the script_name
        refers to the root of the URI, it MUST be an empty string (not "/").

        If script_name is explicitly set to None, then the script_name will be
        provided for each call from request.wsgi_environ['SCRIPT_NAME'].
        """
        ...
    
    @script_name.setter
    def script_name(self, value): # -> None:
        ...
    
    def merge(self, config): # -> None:
        """Merge the given config into self.config."""
        ...
    
    def find_config(self, path, key, default=...): # -> Any | None:
        """Return the most-specific value for key along path, or default."""
        ...
    
    def get_serving(self, local, remote, scheme, sproto): # -> tuple[request_class, response_class]:
        """Create and return a Request and Response object."""
        ...
    
    def release_serving(self): # -> None:
        """Release the current serving (request and response)."""
        ...
    
    def __call__(self, environ, start_response): # -> AppResponse | _TrappedResponse:
        """Call a WSGI-callable."""
        ...
    


class Tree:
    """A registry of CherryPy applications, mounted at diverse points.

    An instance of this class may also be used as a WSGI callable
    (WSGI application object), in which case it dispatches to all
    mounted apps.
    """
    apps = ...
    def __init__(self) -> None:
        """Initialize registry Tree."""
        ...
    
    def mount(self, root, script_name=..., config=...): # -> Application:
        """Mount a new app from a root object, script_name, and config.

        root
            An instance of a "controller class" (a collection of page
            handler methods) which represents the root of the application.
            This may also be an Application instance, or None if using
            a dispatcher other than the default.

        script_name
            A string containing the "mount point" of the application.
            This should start with a slash, and be the path portion of the
            URL at which to mount the given root. For example, if root.index()
            will handle requests to "http://www.example.com:8080/dept/app1/",
            then the script_name argument would be "/dept/app1".

            It MUST NOT end in a slash. If the script_name refers to the
            root of the URI, it MUST be an empty string (not "/").

        config
            A file or dict containing application config.
        """
        ...
    
    def graft(self, wsgi_callable, script_name=...): # -> None:
        """Mount a wsgi callable at the given script_name."""
        ...
    
    def script_name(self, path=...): # -> LiteralString | str | None:
        """Return the script_name of the app at the given path, or None.

        If path is None, cherrypy.request is used.
        """
        ...
    
    def __call__(self, environ, start_response): # -> list[Unknown]:
        """Pre-initialize WSGI env and call WSGI-callable."""
        ...
    


