"""
This type stub file was generated by pyright.
"""

"""Checker for CherryPy sites and mounted apps."""
class Checker:
    """A checker for CherryPy sites and their mounted applications.

    When this object is called at engine startup, it executes each
    of its own methods whose names start with ``check_``. If you wish
    to disable selected checks, simply add a line in your global
    config which sets the appropriate method to False::

        [global]
        checker.check_skipped_app_config = False

    You may also dynamically add or replace ``check_*`` methods in this way.
    """
    on = ...
    def __init__(self) -> None:
        """Initialize Checker instance."""
        ...
    
    def __call__(self): # -> None:
        """Run all check_* methods."""
        ...
    
    def formatwarning(self, message, category, filename, lineno, line=...):
        """Format a warning."""
        ...
    
    global_config_contained_paths = ...
    def check_app_config_entries_dont_start_with_script_name(self): # -> None:
        """Check for App config with sections that repeat script_name."""
        ...
    
    def check_site_config_entries_in_app_config(self): # -> None:
        """Check for mounted Applications that have site-scoped config."""
        ...
    
    def check_skipped_app_config(self): # -> None:
        """Check for mounted Applications that have no config."""
        ...
    
    def check_app_config_brackets(self): # -> None:
        """Check for App config with extraneous brackets in section names."""
        ...
    
    def check_static_paths(self): # -> None:
        """Check Application config for incorrect static paths."""
        ...
    
    obsolete = ...
    deprecated = ...
    def check_compatibility(self): # -> None:
        """Process config and warn on each obsolete or deprecated entry."""
        ...
    
    extra_config_namespaces = ...
    def check_config_namespaces(self): # -> None:
        """Process config and warn on each unknown config namespace."""
        ...
    
    known_config_types = ...
    def check_config_types(self): # -> None:
        """Assert that config values are of the same type as default values."""
        ...
    
    def check_localhost(self): # -> None:
        """Warn if any socket_host is 'localhost'. See #711."""
        ...
    


